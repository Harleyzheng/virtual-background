{"version":3,"sources":["shared/helpers/thumbnailHelper.ts","shared/hooks/useImageThumbnail.ts","shared/components/SelectionButton.tsx","shared/components/TumbnailButton.tsx","shared/components/ImageButton.tsx","shared/components/SelectionIconButton.tsx","core/helpers/backgroundHelper.ts","core/components/BackgroundConfigCard.tsx","core/components/PostProcessingConfigCard.tsx","core/components/SegmentationConfigCard.tsx","shared/hooks/useVideoThumbnail.ts","shared/components/VideoButton.tsx","core/helpers/sourceHelper.ts","core/components/SourceConfigCard.tsx","core/helpers/segmentationHelper.ts","pipelines/canvas2d/canvas2dPipeline.ts","pipelines/helpers/webglHelper.ts","pipelines/webgl2/backgroundBlurStage.ts","pipelines/webgl2/resizingStage.ts","pipelines/webgl2/webgl2Pipeline.ts","pipelines/webgl2/softmaxStage.ts","pipelines/webgl2/jointBilateralFilterStage.ts","pipelines/webgl2/backgroundImageStage.ts","core/hooks/useRenderingPipeline.ts","core/components/OutputViewer.tsx","core/components/SourceViewer.tsx","core/components/ViewerCard.tsx","core/hooks/useBodyPix.ts","core/hooks/useTFLite.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getThumbnailBlob","source","originalWidth","originalHeight","sourceSize","Math","min","horizontalShift","verticalShift","canvas","document","createElement","width","height","getContext","drawImage","Promise","resolve","toBlob","blob","useImageThumbnail","imageUrl","useState","thumbnailUrl","setThumbnailUrl","useEffect","image","Image","src","onload","a","naturalWidth","naturalHeight","URL","createObjectURL","revokeObjectURL","useStyles","makeStyles","theme","createStyles","root","padding","minWidth","spacing","marginRight","marginBottom","border","alignItems","transitionProperty","transitionDuration","transitions","duration","shorter","transitionTimingFunction","easing","easeInOut","transform","active","borderColor","palette","primary","main","SelectionButton","props","classes","Button","className","clsx","disabled","onClick","children","scalableContent","margin","borderRadius","shape","objectFit","ThumbnailButton","alt","onLoad","Skeleton","variant","ImageButton","revokeThumbnailUrl","borderWidth","borderStyle","boxSizing","display","justifyContent","SelectionIconButton","backgroundImageUrls","map","imageName","process","flex","BackgroundConfigCard","Card","CardContent","Typography","gutterBottom","component","config","type","onChange","url","lightWrapping","formControl","marginTop","PostProcessingConfigCard","pipeline","Fragment","Slider","value","jointBilateralFilter","sigmaSpace","max","step","valueLabelDisplay","_event","sigmaColor","coverage","FormControl","InputLabel","Select","label","blendMode","event","target","MenuItem","FormControlLabel","control","Switch","color","checked","smoothSegmentationMask","breakpoints","only","gridColumnStart","gridRowStart","formControls","flexWrap","SegmentationConfigCard","model","backend","inputResolution","isSIMDSupported","useVideoThumbnail","videoUrl","video","onloadedmetadata","currentTime","onseeked","videoWidth","videoHeight","icon","position","bottom","right","common","white","VideoButton","sourceImageUrls","sourceVideoUrls","videoName","SourceConfigCard","inputResolutions","buildCanvas2dPipeline","sourcePlayback","backgroundConfig","segmentationConfig","bodyPix","tflite","addFrameEvent","ctx","segmentationWidth","segmentationHeight","segmentationPixelCount","segmentationMask","ImageData","segmentationMaskCanvas","postProcessingConfig","segmentationMaskCtx","inputMemoryOffset","_getInputMemoryOffset","outputMemoryOffset","_getOutputMemoryOffset","resizeSource","runBodyPixInference","runTFLiteInference","runPostProcessing","htmlElement","imageData","getImageData","i","HEAPF32","data","segmentPerson","segmentation","putImageData","_runInference","background","person","shift","backgroundExp","exp","personExp","globalCompositeOperation","filter","render","updatePostProcessingConfig","newPostProcessingConfig","cleanUp","glsl","String","raw","createPiplelineStageProgram","gl","vertexShader","fragmentShader","positionBuffer","texCoordBuffer","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","Error","getProgramInfoLog","positionAttributeLocation","getAttribLocation","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","texCoordAttributeLocation","compileShader","shaderType","shaderSource","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createTexture","internalformat","minFilter","NEAREST","magFilter","texture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","texStorage2D","x","y","format","dest","buf","createBuffer","PIXEL_PACK_BUFFER","bufferData","byteLength","STREAM_READ","readPixels","getBufferSubDataAsync","deleteBuffer","buffer","srcByteOffset","dstBuffer","dstOffset","length","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitAsync","res","deleteSync","WAIT_FAILED","getBufferSubData","requestAnimationFrame","test","clientWaitSync","TIMEOUT_EXPIRED","buildBackgroundBlurStage","personMaskTexture","blurPass","fragmentShaderSource","scale","outputWidth","outputHeight","texelWidth","texelHeight","FRAGMENT_SHADER","inputFrameLocation","getUniformLocation","personMaskLocation","texelSizeLocation","texture1","RGBA8","LINEAR","texture2","frameBuffer1","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","frameBuffer2","viewport","useProgram","uniform1i","activeTexture","TEXTURE1","uniform2f","drawArrays","TRIANGLE_STRIP","TEXTURE2","deleteFramebuffer","deleteTexture","deleteProgram","deleteShader","buildBlurPass","blendPass","vertexShaderSource","VERTEX_SHADER","blurredInputFrame","coverageLocation","updateCoverage","buildBlendPass","buildResizingStage","tfliteInputMemoryOffset","outputPixelCount","outputTexture","frameBuffer","outputPixels","Uint8Array","readPixelsAsync","RGBA","UNSIGNED_BYTE","tfliteIndex","outputIndex","buildWebGL2Pipeline","backgroundImage","frameWidth","frameHeight","vertexArray","createVertexArray","bindVertexArray","Float32Array","STATIC_DRAW","inputFrameTexture","segmentationTexture","resizingStage","softmaxStage","tfliteOutputMemoryOffset","inputLocation","inputTexture","RG32F","texSubImage2D","RG","buildSoftmaxStage","jointBilateralFilterStage","segmentationMaskLocation","stepLocation","radiusLocation","offsetLocation","sigmaTexelLocation","sigmaColorLocation","updateSigmaSpace","sqrt","radius","offset","sigmaTexel","uniform1f","updateSigmaColor","buildJointBilateralFilterStage","backgroundStage","outputRatio","backgroundScaleLocation","backgroundOffsetLocation","backgroundLocation","lightWrappingLocation","blendModeLocation","backgroundTexture","updateBackgroundImage","xOffset","yOffset","backgroundWidth","backgroundHeight","xScale","yScale","complete","updateLightWrapping","updateBlendMode","buildBackgroundImageStage","clearColor","clear","COLOR_BUFFER_BIT","TEXTURE0","texImage2D","backgroundImageStage","deleteVertexArray","useRenderingPipeline","setPipeline","backgroundImageRef","useRef","canvasRef","fps","setFps","durations","setDurations","renderRequestId","shouldRender","previousTime","beginTime","eventCount","frameCount","frameDurations","newPipeline","current","beginFrame","endFrame","Date","now","time","console","log","cancelAnimationFrame","stats","top","left","textAlign","backgroundColor","OutputViewer","resizingDuration","inferenceDuration","postProcessingDuration","statDetails","round","join","ref","hidden","down","overflow","up","borderRightWidth","borderRightStyle","borderRightColor","divider","SourceViewer","sourceUrl","setSourceUrl","isLoading","setLoading","isCameraError","setCameraError","videoRef","undefined","setTimeout","sourceConfig","constraint","navigator","mediaDevices","getUserMedia","stream","srcObject","error","getCameraStream","CircularProgress","fontSize","autoPlay","playsInline","controls","muted","loop","onLoadedData","minHeight","gridColumnEnd","gridRowEnd","noOutput","avatar","ViewerCard","setSourcePlayback","Paper","Avatar","useBodyPix","setBodyPix","tf","tfBodyPix","loadBodyPix","useTFLite","setTFLite","tfliteSIMD","setTFLiteSIMD","selectedTFLite","setSelectedTFLite","setSIMDSupported","createTFLiteModule","then","createTFLiteSIMDModule","createdTFLiteSIMD","warn","loadTFLite","newSelectedTFLite","modelFileName","fetch","modelResponse","arrayBuffer","modelBufferOffset","_getModelBufferMemoryOffset","HEAPU8","set","_loadModel","_getInputHeight","_getInputWidth","_getInputChannelCount","_getOutputHeight","_getOutputWidth","_getOutputChannelCount","loadMeetModel","gap","gridTemplateColumns","resourceSelectionCards","flexDirection","App","setSourceConfig","setBackgroundConfig","setSegmentationConfig","setPostProcessingConfig","previousSegmentationConfig","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","CssBaseline","getElementById"],"mappings":"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","file":"static/js/main.7989aaa5.chunk.js","sourcesContent":["/**\n * Returns a thumbnail as a Blob.\n * @param source The source image or video.\n * @param originalWidth The original width of the source before sizing.\n * @param originalHeight The original height of the source before sizing.\n */\nexport function getThumbnailBlob(\n  source: HTMLImageElement | HTMLVideoElement,\n  originalWidth: number,\n  originalHeight: number\n) {\n  const sourceSize = Math.min(originalWidth, originalHeight)\n  const horizontalShift = (originalWidth - sourceSize) / 2\n  const verticalShift = (originalHeight - sourceSize) / 2\n\n  const canvas = document.createElement('canvas')\n  canvas.width = 63\n  canvas.height = 63\n  const ctx = canvas.getContext('2d')!\n  ctx.drawImage(\n    source,\n    horizontalShift,\n    verticalShift,\n    sourceSize,\n    sourceSize,\n    0,\n    0,\n    canvas.width,\n    canvas.height\n  )\n\n  return new Promise<Blob | null>((resolve) =>\n    canvas.toBlob((blob) => resolve(blob))\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { getThumbnailBlob } from '../helpers/thumbnailHelper'\n\n/**\n * Returns an image thumbnail URL and a function to revoke it.\n */\nfunction useImageThumbnail(imageUrl: string): [string | undefined, () => void] {\n  const [thumbnailUrl, setThumbnailUrl] = useState<string>()\n\n  useEffect(() => {\n    const image = new Image()\n    image.src = imageUrl\n    image.onload = async () => {\n      const blob = await getThumbnailBlob(\n        image,\n        image.naturalWidth,\n        image.naturalHeight\n      )\n      setThumbnailUrl(URL.createObjectURL(blob))\n    }\n  }, [imageUrl])\n\n  return [thumbnailUrl, () => URL.revokeObjectURL(thumbnailUrl!)]\n}\n\nexport default useImageThumbnail\n","import Button from '@material-ui/core/Button'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport clsx from 'clsx'\n\ntype SelectionButtonProps = {\n  active: boolean\n  disabled?: boolean\n  children: React.ReactNode\n  onClick: () => void\n}\n\nfunction SelectionButton(props: SelectionButtonProps) {\n  const classes = useStyles()\n\n  return (\n    <Button\n      className={clsx(classes.root, props.active && classes.active)}\n      disabled={props.disabled}\n      onClick={props.onClick}\n    >\n      {props.children}\n    </Button>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: 0,\n      minWidth: theme.spacing(7) + 2,\n      height: theme.spacing(7) + 2,\n      width: theme.spacing(7) + 2,\n      marginRight: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n      border: '2px solid transparent',\n      alignItems: 'stretch',\n      transitionProperty: 'transform, border-color',\n      transitionDuration: `${theme.transitions.duration.shorter}ms`,\n      transitionTimingFunction: theme.transitions.easing.easeInOut,\n\n      '&:hover': {\n        transform: 'scale(1.125)',\n      },\n    },\n    active: {\n      borderColor: theme.palette.primary.main,\n      transform: 'scale(1.125)',\n    },\n  })\n)\n\nexport default SelectionButton\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Skeleton from '@material-ui/lab/Skeleton'\nimport clsx from 'clsx'\nimport SelectionButton from './SelectionButton'\n\ntype ThumbnailButtonProps = {\n  thumbnailUrl?: string\n  active: boolean\n  children?: React.ReactNode\n  onClick: () => void\n  onLoad?: () => void\n}\n\nfunction ThumbnailButton(props: ThumbnailButtonProps) {\n  const classes = useStyles()\n\n  return (\n    <SelectionButton\n      active={!!props.thumbnailUrl && props.active}\n      disabled={!props.thumbnailUrl}\n      onClick={props.onClick}\n    >\n      {props.thumbnailUrl ? (\n        <img\n          className={clsx(classes.scalableContent, classes.image)}\n          src={props.thumbnailUrl}\n          alt=\"\"\n          onLoad={props.onLoad}\n        />\n      ) : (\n        <Skeleton className={classes.scalableContent} variant=\"rect\" />\n      )}\n      {props.children}\n    </SelectionButton>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    scalableContent: {\n      // Fixes rendering issues with border when scaled\n      width: 'calc(100% + 2px)',\n      height: 'calc(100% + 2px)',\n      margin: -1,\n      borderRadius: theme.shape.borderRadius,\n    },\n    image: {\n      objectFit: 'cover',\n    },\n  })\n)\n\nexport default ThumbnailButton\n","import useImageThumbnail from '../hooks/useImageThumbnail'\nimport ThumbnailButton from './TumbnailButton'\n\ntype ImageButtonProps = {\n  imageUrl: string\n  active: boolean\n  onClick: () => void\n}\n\nfunction ImageButton(props: ImageButtonProps) {\n  const [thumbnailUrl, revokeThumbnailUrl] = useImageThumbnail(props.imageUrl)\n\n  return (\n    <ThumbnailButton\n      thumbnailUrl={thumbnailUrl}\n      active={props.active}\n      onClick={props.onClick}\n      onLoad={revokeThumbnailUrl}\n    />\n  )\n}\n\nexport default ImageButton\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport SelectionButton from './SelectionButton'\n\ntype SelectionIconButtonProps = {\n  active: boolean\n  children: React.ReactNode\n  onClick: () => void\n}\n\nfunction SelectionIconButton(props: SelectionIconButtonProps) {\n  const classes = useStyles()\n\n  return (\n    <SelectionButton active={props.active} onClick={props.onClick}>\n      <div className={classes.root}>{props.children}</div>\n    </SelectionButton>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      height: '100%',\n      borderWidth: 1,\n      borderStyle: 'solid',\n      borderColor: 'rgba(0, 0, 0, 0.23)',\n      borderRadius: theme.shape.borderRadius,\n      margin: -1,\n      boxSizing: 'content-box',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n  })\n)\n\nexport default SelectionIconButton\n","export type BackgroundConfig = {\n  type: 'none' | 'blur' | 'image'\n  url?: string\n}\n\nexport const backgroundImageUrls = [\n  'architecture-5082700_1280',\n  'porch-691330_1280',\n  'saxon-switzerland-539418_1280',\n  'shibuyasky-4768679_1280',\n].map((imageName) => `${process.env.PUBLIC_URL}/backgrounds/${imageName}.jpg`)\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport BlockIcon from '@material-ui/icons/Block'\nimport BlurOnIcon from '@material-ui/icons/BlurOn'\nimport ImageButton from '../../shared/components/ImageButton'\nimport SelectionIconButton from '../../shared/components/SelectionIconButton'\nimport {\n  BackgroundConfig,\n  backgroundImageUrls,\n} from '../helpers/backgroundHelper'\n\ntype BackgroundConfigCardProps = {\n  config: BackgroundConfig\n  onChange: (config: BackgroundConfig) => void\n}\n\nfunction BackgroundConfigCard(props: BackgroundConfigCardProps) {\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Background\n        </Typography>\n        <SelectionIconButton\n          active={props.config.type === 'none'}\n          onClick={() => props.onChange({ type: 'none' })}\n        >\n          <BlockIcon />\n        </SelectionIconButton>\n        <SelectionIconButton\n          active={props.config.type === 'blur'}\n          onClick={() => props.onChange({ type: 'blur' })}\n        >\n          <BlurOnIcon />\n        </SelectionIconButton>\n        {backgroundImageUrls.map((imageUrl) => (\n          <ImageButton\n            key={imageUrl}\n            imageUrl={imageUrl}\n            active={imageUrl === props.config.url}\n            onClick={() => props.onChange({ type: 'image', url: imageUrl })}\n          />\n        ))}\n      </CardContent>\n    </Card>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flex: 1,\n    },\n  })\n)\n\nexport default BackgroundConfigCard\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Select from '@material-ui/core/Select'\nimport Slider from '@material-ui/core/Slider'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Switch from '@material-ui/core/Switch'\nimport Typography from '@material-ui/core/Typography'\nimport React, { ChangeEvent } from 'react'\nimport {\n  BlendMode,\n  PostProcessingConfig,\n} from '../helpers/postProcessingHelper'\nimport { PipelineName } from '../helpers/segmentationHelper'\n\ntype PostProcessingConfigCardProps = {\n  config: PostProcessingConfig\n  pipeline: PipelineName\n  onChange: (config: PostProcessingConfig) => void\n}\n\nfunction PostProcessingConfigCard(props: PostProcessingConfigCardProps) {\n  const classes = useStyles()\n\n  function handleSmoothSegmentationMaskChange(\n    event: ChangeEvent<HTMLInputElement>\n  ) {\n    props.onChange({\n      ...props.config,\n      smoothSegmentationMask: event.target.checked,\n    })\n  }\n\n  function handleSigmaSpaceChange(_event: any, value: number | number[]) {\n    props.onChange({\n      ...props.config,\n      jointBilateralFilter: {\n        ...props.config.jointBilateralFilter,\n        sigmaSpace: value as number,\n      },\n    })\n  }\n\n  function handleSigmaColorChange(_event: any, value: number | number[]) {\n    props.onChange({\n      ...props.config,\n      jointBilateralFilter: {\n        ...props.config.jointBilateralFilter,\n        sigmaColor: value as number,\n      },\n    })\n  }\n\n  function handleCoverageChange(_event: any, value: number | number[]) {\n    props.onChange({\n      ...props.config,\n      coverage: value as [number, number],\n    })\n  }\n\n  function handleLightWrappingChange(_event: any, value: number | number[]) {\n    props.onChange({\n      ...props.config,\n      lightWrapping: value as number,\n    })\n  }\n\n  function handleBlendModeChange(event: ChangeEvent<{ value: unknown }>) {\n    props.onChange({\n      ...props.config,\n      blendMode: event.target.value as BlendMode,\n    })\n  }\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Post-processing\n        </Typography>\n        {props.pipeline === 'webgl2' ? (\n          <React.Fragment>\n            <Typography gutterBottom>Joint bilateral filter</Typography>\n            <Typography variant=\"body2\">Sigma space</Typography>\n            <Slider\n              value={props.config.jointBilateralFilter.sigmaSpace}\n              min={0}\n              max={10}\n              step={0.1}\n              valueLabelDisplay=\"auto\"\n              onChange={handleSigmaSpaceChange}\n            />\n            <Typography variant=\"body2\">Sigma color</Typography>\n            <Slider\n              value={props.config.jointBilateralFilter.sigmaColor}\n              min={0}\n              max={1}\n              step={0.01}\n              valueLabelDisplay=\"auto\"\n              onChange={handleSigmaColorChange}\n            />\n            <Typography gutterBottom>Background</Typography>\n            <Typography variant=\"body2\">Coverage</Typography>\n            <Slider\n              value={props.config.coverage}\n              min={0}\n              max={1}\n              step={0.01}\n              valueLabelDisplay=\"auto\"\n              onChange={handleCoverageChange}\n            />\n            <Typography variant=\"body2\" gutterBottom>\n              Light wrapping\n            </Typography>\n            <div className={classes.lightWrapping}>\n              <FormControl className={classes.formControl} variant=\"outlined\">\n                <InputLabel>Blend mode</InputLabel>\n                <Select\n                  label=\"Blend mode\"\n                  value={props.config.blendMode}\n                  onChange={handleBlendModeChange}\n                >\n                  <MenuItem value=\"screen\">Screen</MenuItem>\n                  <MenuItem value=\"linearDodge\">Linear dodge</MenuItem>\n                </Select>\n              </FormControl>\n              <Slider\n                value={props.config.lightWrapping}\n                min={0}\n                max={1}\n                step={0.01}\n                valueLabelDisplay=\"auto\"\n                onChange={handleLightWrappingChange}\n              />\n            </div>\n          </React.Fragment>\n        ) : (\n          <FormControlLabel\n            label=\"Smooth segmentation mask\"\n            control={\n              <Switch\n                color=\"primary\"\n                checked={props.config.smoothSegmentationMask}\n                onChange={handleSmoothSegmentationMaskChange}\n              />\n            }\n          />\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    lightWrapping: {\n      display: 'flex',\n      alignItems: 'center',\n    },\n    formControl: {\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(1),\n      marginRight: theme.spacing(2),\n      minWidth: 160,\n    },\n  })\n)\n\nexport default PostProcessingConfigCard\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport FormControl from '@material-ui/core/FormControl'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Select from '@material-ui/core/Select'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport { ChangeEvent } from 'react'\nimport {\n  InputResolution,\n  PipelineName,\n  SegmentationBackend,\n  SegmentationConfig,\n  SegmentationModel,\n} from '../helpers/segmentationHelper'\n\ntype SegmentationConfigCardProps = {\n  config: SegmentationConfig\n  isSIMDSupported: boolean\n  onChange: (config: SegmentationConfig) => void\n}\n\nfunction SegmentationConfigCard(props: SegmentationConfigCardProps) {\n  const classes = useStyles()\n\n  function handleModelChange(event: ChangeEvent<{ value: unknown }>) {\n    const model = event.target.value as SegmentationModel\n    let backend = props.config.backend\n    let inputResolution = props.config.inputResolution\n    if (model === 'meet') {\n      backend = 'wasm'\n      if (inputResolution === '360p') {\n        inputResolution = '144p'\n      }\n    } else if (model === 'bodyPix') {\n      backend = 'webgl'\n      inputResolution = '360p'\n    }\n    let pipeline = props.config.pipeline\n    if (model === 'bodyPix' && pipeline === 'webgl2') {\n      pipeline = 'canvas2dCpu'\n    }\n    props.onChange({\n      ...props.config,\n      model,\n      backend,\n      inputResolution,\n      pipeline,\n    })\n  }\n\n  function handleBackendChange(event: ChangeEvent<{ value: unknown }>) {\n    props.onChange({\n      ...props.config,\n      backend: event.target.value as SegmentationBackend,\n    })\n  }\n\n  function handleInputResolutionChange(event: ChangeEvent<{ value: unknown }>) {\n    props.onChange({\n      ...props.config,\n      inputResolution: event.target.value as InputResolution,\n    })\n  }\n\n  function handlePipelineChange(event: ChangeEvent<{ value: unknown }>) {\n    props.onChange({\n      ...props.config,\n      pipeline: event.target.value as PipelineName,\n    })\n  }\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Segmentation\n        </Typography>\n        <div className={classes.formControls}>\n          <FormControl className={classes.formControl} variant=\"outlined\">\n            <InputLabel>Model</InputLabel>\n            <Select\n              label=\"Model\"\n              value={props.config.model}\n              onChange={handleModelChange}\n            >\n              <MenuItem value=\"meet\">Meet</MenuItem>\n              <MenuItem value=\"bodyPix\">BodyPix</MenuItem>\n            </Select>\n          </FormControl>\n          <FormControl className={classes.formControl} variant=\"outlined\">\n            <InputLabel>Backend</InputLabel>\n            <Select\n              label=\"Backend\"\n              value={props.config.backend}\n              onChange={handleBackendChange}\n            >\n              <MenuItem\n                value=\"wasm\"\n                disabled={props.config.model === 'bodyPix'}\n              >\n                WebAssembly\n              </MenuItem>\n              <MenuItem\n                value=\"wasmSimd\"\n                disabled={\n                  props.config.model === 'bodyPix' || !props.isSIMDSupported\n                }\n              >\n                WebAssembly SIMD\n              </MenuItem>\n              <MenuItem value=\"webgl\" disabled={props.config.model === 'meet'}>\n                WebGL\n              </MenuItem>\n            </Select>\n          </FormControl>\n          <FormControl className={classes.formControl} variant=\"outlined\">\n            <InputLabel>Input resolution</InputLabel>\n            <Select\n              label=\"Input resolution\"\n              value={props.config.inputResolution}\n              onChange={handleInputResolutionChange}\n            >\n              <MenuItem value=\"360p\" disabled={props.config.model === 'meet'}>\n                360p\n              </MenuItem>\n              <MenuItem\n                value=\"144p\"\n                disabled={props.config.model === 'bodyPix'}\n              >\n                144p\n              </MenuItem>\n              <MenuItem value=\"96p\" disabled={props.config.model === 'bodyPix'}>\n                96p\n              </MenuItem>\n            </Select>\n          </FormControl>\n          <FormControl className={classes.formControl} variant=\"outlined\">\n            <InputLabel>Pipeline</InputLabel>\n            <Select\n              label=\"Pipeline\"\n              value={props.config.pipeline}\n              onChange={handlePipelineChange}\n            >\n              <MenuItem\n                value=\"webgl2\"\n                disabled={props.config.model === 'bodyPix'}\n              >\n                WebGL 2\n              </MenuItem>\n              <MenuItem value=\"canvas2dCpu\">Canvas 2D + CPU</MenuItem>\n            </Select>\n          </FormControl>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      [theme.breakpoints.only('md')]: {\n        gridColumnStart: 2,\n        gridRowStart: 2,\n      },\n    },\n    formControls: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    formControl: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n      marginRight: theme.spacing(2),\n      minWidth: 200,\n      flex: 1,\n    },\n  })\n)\n\nexport default SegmentationConfigCard\n","import { useEffect, useState } from 'react'\nimport { getThumbnailBlob } from '../helpers/thumbnailHelper'\n\n/**\n * Returns a video thumbnail URL and a function to revoke it.\n */\nfunction useVideoThumbnail(videoUrl: string): [string | undefined, () => void] {\n  const [thumbnailUrl, setThumbnailUrl] = useState<string>()\n\n  useEffect(() => {\n    const video = document.createElement('video')\n    video.src = videoUrl\n    video.onloadedmetadata = () => {\n      video.currentTime = video.duration / 2\n    }\n    video.onseeked = async () => {\n      const blob = await getThumbnailBlob(\n        video,\n        video.videoWidth,\n        video.videoHeight\n      )\n      setThumbnailUrl(URL.createObjectURL(blob))\n    }\n  }, [videoUrl])\n\n  return [thumbnailUrl, () => URL.revokeObjectURL(thumbnailUrl!)]\n}\n\nexport default useVideoThumbnail\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline'\nimport useVideoThumbnail from '../hooks/useVideoThumbnail'\nimport ThumbnailButton from './TumbnailButton'\n\ntype VideoButtonProps = {\n  videoUrl: string\n  active: boolean\n  onClick: () => void\n}\n\nfunction VideoButton(props: VideoButtonProps) {\n  const classes = useStyles()\n  const [thumbnailUrl, revokeThumbnailUrl] = useVideoThumbnail(props.videoUrl)\n\n  return (\n    <ThumbnailButton\n      thumbnailUrl={thumbnailUrl}\n      active={props.active}\n      onClick={props.onClick}\n      onLoad={revokeThumbnailUrl}\n    >\n      <PlayCircleOutlineIcon className={classes.icon} />\n    </ThumbnailButton>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    icon: {\n      position: 'absolute',\n      bottom: 0,\n      right: 0,\n      color: theme.palette.common.white,\n    },\n  })\n)\n\nexport default VideoButton\n","export type SourceConfig = {\n  type: 'image' | 'video' | 'camera'\n  url?: string\n}\n\nexport type SourcePlayback = {\n  htmlElement: HTMLImageElement | HTMLVideoElement\n  width: number\n  height: number\n}\n\nexport const sourceImageUrls = [\n  'girl-919048_1280',\n  'doctor-5871743_640',\n  'woman-5883428_1280',\n].map((imageName) => `${process.env.PUBLIC_URL}/images/${imageName}.jpg`)\n\nexport const sourceVideoUrls = [\n  'Dance - 32938',\n  'Doctor - 26732',\n  'Thoughtful - 35590',\n].map((videoName) => `${process.env.PUBLIC_URL}/videos/${videoName}.mp4`)\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport VideocamIcon from '@material-ui/icons/Videocam'\nimport ImageButton from '../../shared/components/ImageButton'\nimport SelectionIconButton from '../../shared/components/SelectionIconButton'\nimport VideoButton from '../../shared/components/VideoButton'\nimport {\n  SourceConfig,\n  sourceImageUrls,\n  sourceVideoUrls,\n} from '../helpers/sourceHelper'\n\ntype SourceConfigCardProps = {\n  config: SourceConfig\n  onChange: (config: SourceConfig) => void\n}\n\nfunction SourceConfigCard(props: SourceConfigCardProps) {\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Source\n        </Typography>\n        <SelectionIconButton\n          active={props.config.type === 'camera'}\n          onClick={() => props.onChange({ type: 'camera' })}\n        >\n          <VideocamIcon />\n        </SelectionIconButton>\n        {sourceImageUrls.map((imageUrl) => (\n          <ImageButton\n            key={imageUrl}\n            imageUrl={imageUrl}\n            active={imageUrl === props.config.url}\n            onClick={() => props.onChange({ type: 'image', url: imageUrl })}\n          />\n        ))}\n        {sourceVideoUrls.map((videoUrl) => (\n          <VideoButton\n            key={videoUrl}\n            videoUrl={videoUrl}\n            active={videoUrl === props.config.url}\n            onClick={() => props.onChange({ type: 'video', url: videoUrl })}\n          />\n        ))}\n      </CardContent>\n    </Card>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flex: 1,\n    },\n  })\n)\n\nexport default SourceConfigCard\n","export type SegmentationModel = 'bodyPix' | 'meet'\nexport type SegmentationBackend = 'webgl' | 'wasm' | 'wasmSimd'\nexport type InputResolution = '360p' | '144p' | '96p'\n\nexport const inputResolutions: {\n  [resolution in InputResolution]: [number, number]\n} = {\n  '360p': [640, 360],\n  '144p': [256, 144],\n  '96p': [160, 96],\n}\n\nexport type PipelineName = 'canvas2dCpu' | 'webgl2'\n\nexport type SegmentationConfig = {\n  model: SegmentationModel\n  backend: SegmentationBackend\n  inputResolution: InputResolution\n  pipeline: PipelineName\n}\n","import { BodyPix } from '@tensorflow-models/body-pix'\nimport { BackgroundConfig } from '../../core/helpers/backgroundHelper'\nimport { PostProcessingConfig } from '../../core/helpers/postProcessingHelper'\nimport {\n  inputResolutions,\n  SegmentationConfig,\n} from '../../core/helpers/segmentationHelper'\nimport { SourcePlayback } from '../../core/helpers/sourceHelper'\nimport { TFLite } from '../../core/hooks/useTFLite'\n\nexport function buildCanvas2dPipeline(\n  sourcePlayback: SourcePlayback,\n  backgroundConfig: BackgroundConfig,\n  segmentationConfig: SegmentationConfig,\n  canvas: HTMLCanvasElement,\n  bodyPix: BodyPix,\n  tflite: TFLite,\n  addFrameEvent: () => void\n) {\n  const ctx = canvas.getContext('2d')!\n\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\n    segmentationConfig.inputResolution\n  ]\n  const segmentationPixelCount = segmentationWidth * segmentationHeight\n  const segmentationMask = new ImageData(segmentationWidth, segmentationHeight)\n  const segmentationMaskCanvas = document.createElement('canvas')\n  segmentationMaskCanvas.width = segmentationWidth\n  segmentationMaskCanvas.height = segmentationHeight\n  const segmentationMaskCtx = segmentationMaskCanvas.getContext('2d')!\n\n  const inputMemoryOffset = tflite._getInputMemoryOffset() / 4\n  const outputMemoryOffset = tflite._getOutputMemoryOffset() / 4\n\n  let postProcessingConfig: PostProcessingConfig\n\n  async function render() {\n    if (backgroundConfig.type !== 'none') {\n      resizeSource()\n    }\n\n    addFrameEvent()\n\n    if (backgroundConfig.type !== 'none') {\n      if (segmentationConfig.model === 'bodyPix') {\n        await runBodyPixInference()\n      } else {\n        runTFLiteInference()\n      }\n    }\n\n    addFrameEvent()\n\n    runPostProcessing()\n  }\n\n  function updatePostProcessingConfig(\n    newPostProcessingConfig: PostProcessingConfig\n  ) {\n    postProcessingConfig = newPostProcessingConfig\n  }\n\n  function cleanUp() {\n    // Nothing to clean up in this rendering pipeline\n  }\n\n  function resizeSource() {\n    segmentationMaskCtx.drawImage(\n      sourcePlayback.htmlElement,\n      0,\n      0,\n      sourcePlayback.width,\n      sourcePlayback.height,\n      0,\n      0,\n      segmentationWidth,\n      segmentationHeight\n    )\n\n    if (segmentationConfig.model === 'meet') {\n      const imageData = segmentationMaskCtx.getImageData(\n        0,\n        0,\n        segmentationWidth,\n        segmentationHeight\n      )\n\n      for (let i = 0; i < segmentationPixelCount; i++) {\n        tflite.HEAPF32[inputMemoryOffset + i * 3] = imageData.data[i * 4] / 255\n        tflite.HEAPF32[inputMemoryOffset + i * 3 + 1] =\n          imageData.data[i * 4 + 1] / 255\n        tflite.HEAPF32[inputMemoryOffset + i * 3 + 2] =\n          imageData.data[i * 4 + 2] / 255\n      }\n    }\n  }\n\n  async function runBodyPixInference() {\n    const segmentation = await bodyPix.segmentPerson(segmentationMaskCanvas)\n    for (let i = 0; i < segmentationPixelCount; i++) {\n      // Sets only the alpha component of each pixel\n      segmentationMask.data[i * 4 + 3] = segmentation.data[i] ? 255 : 0\n    }\n    segmentationMaskCtx.putImageData(segmentationMask, 0, 0)\n  }\n\n  function runTFLiteInference() {\n    tflite._runInference()\n\n    for (let i = 0; i < segmentationPixelCount; i++) {\n      const background = tflite.HEAPF32[outputMemoryOffset + i * 2]\n      const person = tflite.HEAPF32[outputMemoryOffset + i * 2 + 1]\n      const shift = Math.max(background, person)\n      const backgroundExp = Math.exp(background - shift)\n      const personExp = Math.exp(person - shift)\n\n      // Sets only the alpha component of each pixel\n      segmentationMask.data[i * 4 + 3] =\n        (255 * personExp) / (backgroundExp + personExp) // softmax\n    }\n    segmentationMaskCtx.putImageData(segmentationMask, 0, 0)\n  }\n\n  function runPostProcessing() {\n    ctx.globalCompositeOperation = 'copy'\n    ctx.filter = 'none'\n\n    if (postProcessingConfig?.smoothSegmentationMask) {\n      if (backgroundConfig.type === 'blur') {\n        ctx.filter = 'blur(8px)' // FIXME Does not work on Safari\n      } else if (backgroundConfig.type === 'image') {\n        ctx.filter = 'blur(4px)' // FIXME Does not work on Safari\n      }\n    }\n\n    if (backgroundConfig.type !== 'none') {\n      drawSegmentationMask()\n      ctx.globalCompositeOperation = 'source-in'\n      ctx.filter = 'none'\n    }\n\n    ctx.drawImage(sourcePlayback.htmlElement, 0, 0)\n\n    if (backgroundConfig.type === 'blur') {\n      blurBackground()\n    }\n  }\n\n  function drawSegmentationMask() {\n    ctx.drawImage(\n      segmentationMaskCanvas,\n      0,\n      0,\n      segmentationWidth,\n      segmentationHeight,\n      0,\n      0,\n      sourcePlayback.width,\n      sourcePlayback.height\n    )\n  }\n\n  function blurBackground() {\n    ctx.globalCompositeOperation = 'destination-over'\n    ctx.filter = 'blur(8px)' // FIXME Does not work on Safari\n    ctx.drawImage(sourcePlayback.htmlElement, 0, 0)\n  }\n\n  return { render, updatePostProcessingConfig, cleanUp }\n}\n","/**\n * Use it along with boyswan.glsl-literal VSCode extension\n * to get GLSL syntax highlighting.\n * https://marketplace.visualstudio.com/items?itemName=boyswan.glsl-literal\n *\n * On VSCode OSS, boyswan.glsl-literal requires slevesque.shader extension\n * to be installed as well.\n * https://marketplace.visualstudio.com/items?itemName=slevesque.shader\n */\nexport const glsl = String.raw\n\nexport function createPiplelineStageProgram(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  fragmentShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer\n) {\n  const program = createProgram(gl, vertexShader, fragmentShader)\n\n  const positionAttributeLocation = gl.getAttribLocation(program, 'a_position')\n  gl.enableVertexAttribArray(positionAttributeLocation)\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n  gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0)\n\n  const texCoordAttributeLocation = gl.getAttribLocation(program, 'a_texCoord')\n  gl.enableVertexAttribArray(texCoordAttributeLocation)\n  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer)\n  gl.vertexAttribPointer(texCoordAttributeLocation, 2, gl.FLOAT, false, 0, 0)\n\n  return program\n}\n\nexport function createProgram(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  fragmentShader: WebGLShader\n) {\n  const program = gl.createProgram()!\n  gl.attachShader(program, vertexShader)\n  gl.attachShader(program, fragmentShader)\n  gl.linkProgram(program)\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    throw new Error(\n      `Could not link WebGL program: ${gl.getProgramInfoLog(program)}`\n    )\n  }\n  return program\n}\n\nexport function compileShader(\n  gl: WebGL2RenderingContext,\n  shaderType: number,\n  shaderSource: string\n) {\n  const shader = gl.createShader(shaderType)!\n  gl.shaderSource(shader, shaderSource)\n  gl.compileShader(shader)\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    throw new Error(`Could not compile shader: ${gl.getShaderInfoLog(shader)}`)\n  }\n  return shader\n}\n\nexport function createTexture(\n  gl: WebGL2RenderingContext,\n  internalformat: number,\n  width: number,\n  height: number,\n  minFilter = gl.NEAREST,\n  magFilter = gl.NEAREST\n) {\n  const texture = gl.createTexture()\n  gl.bindTexture(gl.TEXTURE_2D, texture)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter)\n  gl.texStorage2D(gl.TEXTURE_2D, 1, internalformat, width, height)\n  return texture\n}\n\nexport async function readPixelsAsync(\n  gl: WebGL2RenderingContext,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  format: number,\n  type: number,\n  dest: ArrayBufferView\n) {\n  const buf = gl.createBuffer()!\n  gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf)\n  gl.bufferData(gl.PIXEL_PACK_BUFFER, dest.byteLength, gl.STREAM_READ)\n  gl.readPixels(x, y, width, height, format, type, 0)\n  gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null)\n\n  await getBufferSubDataAsync(gl, gl.PIXEL_PACK_BUFFER, buf, 0, dest)\n\n  gl.deleteBuffer(buf)\n  return dest\n}\n\nasync function getBufferSubDataAsync(\n  gl: WebGL2RenderingContext,\n  target: number,\n  buffer: WebGLBuffer,\n  srcByteOffset: number,\n  dstBuffer: ArrayBufferView,\n  dstOffset?: number,\n  length?: number\n) {\n  const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0)!\n  gl.flush()\n  const res = await clientWaitAsync(gl, sync)\n  gl.deleteSync(sync)\n\n  if (res !== gl.WAIT_FAILED) {\n    gl.bindBuffer(target, buffer)\n    gl.getBufferSubData(target, srcByteOffset, dstBuffer, dstOffset, length)\n    gl.bindBuffer(target, null)\n  }\n}\n\nfunction clientWaitAsync(gl: WebGL2RenderingContext, sync: WebGLSync) {\n  return new Promise<number>((resolve) => {\n    function test() {\n      const res = gl.clientWaitSync(sync, 0, 0)\n      if (res === gl.WAIT_FAILED) {\n        resolve(res)\n        return\n      }\n      if (res === gl.TIMEOUT_EXPIRED) {\n        requestAnimationFrame(test)\n        return\n      }\n      resolve(res)\n    }\n    requestAnimationFrame(test)\n  })\n}\n","import {\n  compileShader,\n  createPiplelineStageProgram,\n  createTexture,\n  glsl,\n} from '../helpers/webglHelper'\n\nexport type BackgroundBlurStage = {\n  render(): void\n  updateCoverage(coverage: [number, number]): void\n  cleanUp(): void\n}\n\nexport function buildBackgroundBlurStage(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  personMaskTexture: WebGLTexture,\n  canvas: HTMLCanvasElement\n): BackgroundBlurStage {\n  const blurPass = buildBlurPass(\n    gl,\n    vertexShader,\n    positionBuffer,\n    texCoordBuffer,\n    personMaskTexture,\n    canvas\n  )\n  const blendPass = buildBlendPass(gl, positionBuffer, texCoordBuffer, canvas)\n\n  function render() {\n    blurPass.render()\n    blendPass.render()\n  }\n\n  function updateCoverage(coverage: [number, number]) {\n    blendPass.updateCoverage(coverage)\n  }\n\n  function cleanUp() {\n    blendPass.cleanUp()\n    blurPass.cleanUp()\n  }\n\n  return {\n    render,\n    updateCoverage,\n    cleanUp,\n  }\n}\n\nfunction buildBlurPass(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  personMaskTexture: WebGLTexture,\n  canvas: HTMLCanvasElement\n) {\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_personMask;\n    uniform vec2 u_texelSize;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    const float offset[5] = float[](0.0, 1.0, 2.0, 3.0, 4.0);\n    const float weight[5] = float[](0.2270270270, 0.1945945946, 0.1216216216,\n      0.0540540541, 0.0162162162);\n\n    void main() {\n      vec4 centerColor = texture(u_inputFrame, v_texCoord);\n      float personMask = texture(u_personMask, v_texCoord).a;\n\n      vec4 frameColor = centerColor * weight[0] * (1.0 - personMask);\n\n      for (int i = 1; i < 5; i++) {\n        vec2 offset = vec2(offset[i]) * u_texelSize;\n\n        vec2 texCoord = v_texCoord + offset;\n        frameColor += texture(u_inputFrame, texCoord) * weight[i] *\n          (1.0 - texture(u_personMask, texCoord).a);\n\n        texCoord = v_texCoord - offset;\n        frameColor += texture(u_inputFrame, texCoord) * weight[i] *\n          (1.0 - texture(u_personMask, texCoord).a);\n      }\n      outColor = vec4(frameColor.rgb + (1.0 - frameColor.a) * centerColor.rgb, 1.0);\n    }\n  `\n\n  const scale = 0.5\n  const outputWidth = canvas.width * scale\n  const outputHeight = canvas.height * scale\n  const texelWidth = 1 / outputWidth\n  const texelHeight = 1 / outputHeight\n\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\n  const personMaskLocation = gl.getUniformLocation(program, 'u_personMask')\n  const texelSizeLocation = gl.getUniformLocation(program, 'u_texelSize')\n  const texture1 = createTexture(\n    gl,\n    gl.RGBA8,\n    outputWidth,\n    outputHeight,\n    gl.NEAREST,\n    gl.LINEAR\n  )\n  const texture2 = createTexture(\n    gl,\n    gl.RGBA8,\n    outputWidth,\n    outputHeight,\n    gl.NEAREST,\n    gl.LINEAR\n  )\n\n  const frameBuffer1 = gl.createFramebuffer()\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer1)\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    texture1,\n    0\n  )\n\n  const frameBuffer2 = gl.createFramebuffer()\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer2)\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    texture2,\n    0\n  )\n\n  gl.useProgram(program)\n  gl.uniform1i(personMaskLocation, 1)\n\n  function render() {\n    gl.viewport(0, 0, outputWidth, outputHeight)\n    gl.useProgram(program)\n    gl.uniform1i(inputFrameLocation, 0)\n    gl.activeTexture(gl.TEXTURE1)\n    gl.bindTexture(gl.TEXTURE_2D, personMaskTexture)\n\n    for (let i = 0; i < 3; i++) {\n      gl.uniform2f(texelSizeLocation, 0, texelHeight)\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer1)\n      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n\n      gl.activeTexture(gl.TEXTURE2)\n      gl.bindTexture(gl.TEXTURE_2D, texture1)\n      gl.uniform1i(inputFrameLocation, 2)\n\n      gl.uniform2f(texelSizeLocation, texelWidth, 0)\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer2)\n      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n\n      gl.bindTexture(gl.TEXTURE_2D, texture2)\n    }\n  }\n\n  function cleanUp() {\n    gl.deleteFramebuffer(frameBuffer2)\n    gl.deleteFramebuffer(frameBuffer1)\n    gl.deleteTexture(texture2)\n    gl.deleteTexture(texture1)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n  }\n\n  return {\n    render,\n    cleanUp,\n  }\n}\n\nfunction buildBlendPass(\n  gl: WebGL2RenderingContext,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  canvas: HTMLCanvasElement\n) {\n  const vertexShaderSource = glsl`#version 300 es\n\n    in vec2 a_position;\n    in vec2 a_texCoord;\n\n    out vec2 v_texCoord;\n\n    void main() {\n      // Flipping Y is required when rendering to canvas\n      gl_Position = vec4(a_position * vec2(1.0, -1.0), 0.0, 1.0);\n      v_texCoord = a_texCoord;\n    }\n  `\n\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_personMask;\n    uniform sampler2D u_blurredInputFrame;\n    uniform vec2 u_coverage;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    void main() {\n      vec3 color = texture(u_inputFrame, v_texCoord).rgb;\n      vec3 blurredColor = texture(u_blurredInputFrame, v_texCoord).rgb;\n      float personMask = texture(u_personMask, v_texCoord).a;\n      personMask = smoothstep(u_coverage.x, u_coverage.y, personMask);\n      outColor = vec4(mix(blurredColor, color, personMask), 1.0);\n    }\n  `\n\n  const { width: outputWidth, height: outputHeight } = canvas\n\n  const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource)\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\n  const personMaskLocation = gl.getUniformLocation(program, 'u_personMask')\n  const blurredInputFrame = gl.getUniformLocation(\n    program,\n    'u_blurredInputFrame'\n  )\n  const coverageLocation = gl.getUniformLocation(program, 'u_coverage')\n\n  gl.useProgram(program)\n  gl.uniform1i(inputFrameLocation, 0)\n  gl.uniform1i(personMaskLocation, 1)\n  gl.uniform1i(blurredInputFrame, 2)\n  gl.uniform2f(coverageLocation, 0, 1)\n\n  function render() {\n    gl.viewport(0, 0, outputWidth, outputHeight)\n    gl.useProgram(program)\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n  }\n\n  function updateCoverage(coverage: [number, number]) {\n    gl.useProgram(program)\n    gl.uniform2f(coverageLocation, coverage[0], coverage[1])\n  }\n\n  function cleanUp() {\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n    gl.deleteShader(vertexShader)\n  }\n\n  return {\n    render,\n    updateCoverage,\n    cleanUp,\n  }\n}\n","import {\n  inputResolutions,\n  SegmentationConfig,\n} from '../../core/helpers/segmentationHelper'\nimport { TFLite } from '../../core/hooks/useTFLite'\nimport {\n  compileShader,\n  createPiplelineStageProgram,\n  createTexture,\n  glsl,\n  readPixelsAsync,\n} from '../helpers/webglHelper'\n\nexport function buildResizingStage(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  segmentationConfig: SegmentationConfig,\n  tflite: TFLite\n) {\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    void main() {\n      outColor = texture(u_inputFrame, v_texCoord);\n    }\n  `\n\n  // TFLite memory will be accessed as float32\n  const tfliteInputMemoryOffset = tflite._getInputMemoryOffset() / 4\n\n  const [outputWidth, outputHeight] = inputResolutions[\n    segmentationConfig.inputResolution\n  ]\n  const outputPixelCount = outputWidth * outputHeight\n\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\n  const outputTexture = createTexture(gl, gl.RGBA8, outputWidth, outputHeight)\n\n  const frameBuffer = gl.createFramebuffer()\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    outputTexture,\n    0\n  )\n  const outputPixels = new Uint8Array(outputPixelCount * 4)\n\n  gl.useProgram(program)\n  gl.uniform1i(inputFrameLocation, 0)\n\n  function render() {\n    gl.viewport(0, 0, outputWidth, outputHeight)\n    gl.useProgram(program)\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n\n    // Downloads pixels asynchronously from GPU while rendering the current frame\n    readPixelsAsync(\n      gl,\n      0,\n      0,\n      outputWidth,\n      outputHeight,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      outputPixels\n    )\n\n    for (let i = 0; i < outputPixelCount; i++) {\n      const tfliteIndex = tfliteInputMemoryOffset + i * 3\n      const outputIndex = i * 4\n      tflite.HEAPF32[tfliteIndex] = outputPixels[outputIndex] / 255\n      tflite.HEAPF32[tfliteIndex + 1] = outputPixels[outputIndex + 1] / 255\n      tflite.HEAPF32[tfliteIndex + 2] = outputPixels[outputIndex + 2] / 255\n    }\n  }\n\n  function cleanUp() {\n    gl.deleteFramebuffer(frameBuffer)\n    gl.deleteTexture(outputTexture)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n  }\n\n  return { render, cleanUp }\n}\n","import { BackgroundConfig } from '../../core/helpers/backgroundHelper'\nimport { PostProcessingConfig } from '../../core/helpers/postProcessingHelper'\nimport {\n  inputResolutions,\n  SegmentationConfig,\n} from '../../core/helpers/segmentationHelper'\nimport { SourcePlayback } from '../../core/helpers/sourceHelper'\nimport { TFLite } from '../../core/hooks/useTFLite'\nimport { compileShader, createTexture, glsl } from '../helpers/webglHelper'\nimport {\n  BackgroundBlurStage,\n  buildBackgroundBlurStage,\n} from './backgroundBlurStage'\nimport {\n  BackgroundImageStage,\n  buildBackgroundImageStage,\n} from './backgroundImageStage'\nimport { buildJointBilateralFilterStage } from './jointBilateralFilterStage'\nimport { buildResizingStage } from './resizingStage'\nimport { buildSoftmaxStage } from './softmaxStage'\n\nexport function buildWebGL2Pipeline(\n  sourcePlayback: SourcePlayback,\n  backgroundImage: HTMLImageElement | null,\n  backgroundConfig: BackgroundConfig,\n  segmentationConfig: SegmentationConfig,\n  canvas: HTMLCanvasElement,\n  tflite: TFLite,\n  addFrameEvent: () => void\n) {\n  const vertexShaderSource = glsl`#version 300 es\n\n    in vec2 a_position;\n    in vec2 a_texCoord;\n\n    out vec2 v_texCoord;\n\n    void main() {\n      gl_Position = vec4(a_position, 0.0, 1.0);\n      v_texCoord = a_texCoord;\n    }\n  `\n\n  const { width: frameWidth, height: frameHeight } = sourcePlayback\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\n    segmentationConfig.inputResolution\n  ]\n\n  const gl = canvas.getContext('webgl2')!\n\n  const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource)\n\n  const vertexArray = gl.createVertexArray()\n  gl.bindVertexArray(vertexArray)\n\n  const positionBuffer = gl.createBuffer()!\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array([-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0]),\n    gl.STATIC_DRAW\n  )\n\n  const texCoordBuffer = gl.createBuffer()!\n  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer)\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0]),\n    gl.STATIC_DRAW\n  )\n\n  // We don't use texStorage2D here because texImage2D seems faster\n  // to upload video texture than texSubImage2D even though the latter\n  // is supposed to be the recommended way:\n  // https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#use_texstorage_to_create_textures\n  const inputFrameTexture = gl.createTexture()\n  gl.bindTexture(gl.TEXTURE_2D, inputFrameTexture)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n\n  // TODO Rename segmentation and person mask to be more specific\n  const segmentationTexture = createTexture(\n    gl,\n    gl.RGBA8,\n    segmentationWidth,\n    segmentationHeight\n  )!\n  const personMaskTexture = createTexture(\n    gl,\n    gl.RGBA8,\n    frameWidth,\n    frameHeight\n  )!\n\n  const resizingStage = buildResizingStage(\n    gl,\n    vertexShader,\n    positionBuffer,\n    texCoordBuffer,\n    segmentationConfig,\n    tflite\n  )\n  const softmaxStage = buildSoftmaxStage(\n    gl,\n    vertexShader,\n    positionBuffer,\n    texCoordBuffer,\n    segmentationConfig,\n    tflite,\n    segmentationTexture\n  )\n  const jointBilateralFilterStage = buildJointBilateralFilterStage(\n    gl,\n    vertexShader,\n    positionBuffer,\n    texCoordBuffer,\n    segmentationTexture,\n    segmentationConfig,\n    personMaskTexture,\n    canvas\n  )\n  const backgroundStage =\n    backgroundConfig.type === 'blur'\n      ? buildBackgroundBlurStage(\n          gl,\n          vertexShader,\n          positionBuffer,\n          texCoordBuffer,\n          personMaskTexture,\n          canvas\n        )\n      : buildBackgroundImageStage(\n          gl,\n          positionBuffer,\n          texCoordBuffer,\n          personMaskTexture,\n          backgroundImage,\n          canvas\n        )\n\n  async function render() {\n    gl.clearColor(0, 0, 0, 0)\n    gl.clear(gl.COLOR_BUFFER_BIT)\n\n    gl.activeTexture(gl.TEXTURE0)\n    gl.bindTexture(gl.TEXTURE_2D, inputFrameTexture)\n\n    // texImage2D seems faster than texSubImage2D to upload\n    // video texture\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.RGBA,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      sourcePlayback.htmlElement\n    )\n\n    gl.bindVertexArray(vertexArray)\n\n    resizingStage.render()\n\n    addFrameEvent()\n\n    tflite._runInference()\n\n    addFrameEvent()\n\n    softmaxStage.render()\n    jointBilateralFilterStage.render()\n    backgroundStage.render()\n  }\n\n  function updatePostProcessingConfig(\n    postProcessingConfig: PostProcessingConfig\n  ) {\n    jointBilateralFilterStage.updateSigmaSpace(\n      postProcessingConfig.jointBilateralFilter.sigmaSpace\n    )\n    jointBilateralFilterStage.updateSigmaColor(\n      postProcessingConfig.jointBilateralFilter.sigmaColor\n    )\n\n    if (backgroundConfig.type === 'image') {\n      const backgroundImageStage = backgroundStage as BackgroundImageStage\n      backgroundImageStage.updateCoverage(postProcessingConfig.coverage)\n      backgroundImageStage.updateLightWrapping(\n        postProcessingConfig.lightWrapping\n      )\n      backgroundImageStage.updateBlendMode(postProcessingConfig.blendMode)\n    } else if (backgroundConfig.type === 'blur') {\n      const backgroundBlurStage = backgroundStage as BackgroundBlurStage\n      backgroundBlurStage.updateCoverage(postProcessingConfig.coverage)\n    } else {\n      // TODO Handle no background in a separate pipeline path\n      const backgroundImageStage = backgroundStage as BackgroundImageStage\n      backgroundImageStage.updateCoverage([0, 0.9999])\n      backgroundImageStage.updateLightWrapping(0)\n    }\n  }\n\n  function cleanUp() {\n    backgroundStage.cleanUp()\n    jointBilateralFilterStage.cleanUp()\n    softmaxStage.cleanUp()\n    resizingStage.cleanUp()\n\n    gl.deleteTexture(personMaskTexture)\n    gl.deleteTexture(segmentationTexture)\n    gl.deleteTexture(inputFrameTexture)\n    gl.deleteBuffer(texCoordBuffer)\n    gl.deleteBuffer(positionBuffer)\n    gl.deleteVertexArray(vertexArray)\n    gl.deleteShader(vertexShader)\n  }\n\n  return { render, updatePostProcessingConfig, cleanUp }\n}\n","import {\n  inputResolutions,\n  SegmentationConfig,\n} from '../../core/helpers/segmentationHelper'\nimport { TFLite } from '../../core/hooks/useTFLite'\nimport {\n  compileShader,\n  createPiplelineStageProgram,\n  createTexture,\n  glsl,\n} from '../helpers/webglHelper'\n\nexport function buildSoftmaxStage(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  segmentationConfig: SegmentationConfig,\n  tflite: TFLite,\n  outputTexture: WebGLTexture\n) {\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputSegmentation;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    void main() {\n      vec2 segmentation = texture(u_inputSegmentation, v_texCoord).rg;\n      float shift = max(segmentation.r, segmentation.g);\n      float backgroundExp = exp(segmentation.r - shift);\n      float personExp = exp(segmentation.g - shift);\n      outColor = vec4(vec3(0.0), personExp / (backgroundExp + personExp));\n    }\n  `\n\n  // TFLite memory will be accessed as float32\n  const tfliteOutputMemoryOffset = tflite._getOutputMemoryOffset() / 4\n\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\n    segmentationConfig.inputResolution\n  ]\n\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const inputLocation = gl.getUniformLocation(program, 'u_inputSegmentation')\n  const inputTexture = createTexture(\n    gl,\n    gl.RG32F,\n    segmentationWidth,\n    segmentationHeight\n  )\n\n  const frameBuffer = gl.createFramebuffer()\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    outputTexture,\n    0\n  )\n\n  gl.useProgram(program)\n  gl.uniform1i(inputLocation, 1)\n\n  function render() {\n    gl.viewport(0, 0, segmentationWidth, segmentationHeight)\n    gl.useProgram(program)\n    gl.activeTexture(gl.TEXTURE1)\n    gl.bindTexture(gl.TEXTURE_2D, inputTexture)\n    gl.texSubImage2D(\n      gl.TEXTURE_2D,\n      0,\n      0,\n      0,\n      segmentationWidth,\n      segmentationHeight,\n      gl.RG,\n      gl.FLOAT,\n      tflite.HEAPF32,\n      tfliteOutputMemoryOffset\n    )\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n  }\n\n  function cleanUp() {\n    gl.deleteFramebuffer(frameBuffer)\n    gl.deleteTexture(inputTexture)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n  }\n\n  return { render, cleanUp }\n}\n","import {\n  inputResolutions,\n  SegmentationConfig,\n} from '../../core/helpers/segmentationHelper'\nimport {\n  compileShader,\n  createPiplelineStageProgram,\n  glsl,\n} from '../helpers/webglHelper'\n\nexport function buildJointBilateralFilterStage(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  inputTexture: WebGLTexture,\n  segmentationConfig: SegmentationConfig,\n  outputTexture: WebGLTexture,\n  canvas: HTMLCanvasElement\n) {\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_segmentationMask;\n    uniform vec2 u_texelSize;\n    uniform float u_step;\n    uniform float u_radius;\n    uniform float u_offset;\n    uniform float u_sigmaTexel;\n    uniform float u_sigmaColor;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    float gaussian(float x, float sigma) {\n      float coeff = -0.5 / (sigma * sigma * 4.0 + 1.0e-6);\n      return exp((x * x) * coeff);\n    }\n\n    void main() {\n      vec2 centerCoord = v_texCoord;\n      vec3 centerColor = texture(u_inputFrame, centerCoord).rgb;\n      float newVal = 0.0;\n\n      float spaceWeight = 0.0;\n      float colorWeight = 0.0;\n      float totalWeight = 0.0;\n\n      // Subsample kernel space.\n      for (float i = -u_radius + u_offset; i <= u_radius; i += u_step) {\n        for (float j = -u_radius + u_offset; j <= u_radius; j += u_step) {\n          vec2 shift = vec2(j, i) * u_texelSize;\n          vec2 coord = vec2(centerCoord + shift);\n          vec3 frameColor = texture(u_inputFrame, coord).rgb;\n          float outVal = texture(u_segmentationMask, coord).a;\n\n          spaceWeight = gaussian(distance(centerCoord, coord), u_sigmaTexel);\n          colorWeight = gaussian(distance(centerColor, frameColor), u_sigmaColor);\n          totalWeight += spaceWeight * colorWeight;\n\n          newVal += spaceWeight * colorWeight * outVal;\n        }\n      }\n      newVal /= totalWeight;\n\n      outColor = vec4(vec3(0.0), newVal);\n    }\n  `\n\n  const [segmentationWidth, segmentationHeight] = inputResolutions[\n    segmentationConfig.inputResolution\n  ]\n  const { width: outputWidth, height: outputHeight } = canvas\n  const texelWidth = 1 / outputWidth\n  const texelHeight = 1 / outputHeight\n\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\n  const segmentationMaskLocation = gl.getUniformLocation(\n    program,\n    'u_segmentationMask'\n  )\n  const texelSizeLocation = gl.getUniformLocation(program, 'u_texelSize')\n  const stepLocation = gl.getUniformLocation(program, 'u_step')\n  const radiusLocation = gl.getUniformLocation(program, 'u_radius')\n  const offsetLocation = gl.getUniformLocation(program, 'u_offset')\n  const sigmaTexelLocation = gl.getUniformLocation(program, 'u_sigmaTexel')\n  const sigmaColorLocation = gl.getUniformLocation(program, 'u_sigmaColor')\n\n  const frameBuffer = gl.createFramebuffer()\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    outputTexture,\n    0\n  )\n\n  gl.useProgram(program)\n  gl.uniform1i(inputFrameLocation, 0)\n  gl.uniform1i(segmentationMaskLocation, 1)\n  gl.uniform2f(texelSizeLocation, texelWidth, texelHeight)\n\n  // Ensures default values are configured to prevent infinite\n  // loop in fragment shader\n  updateSigmaSpace(0)\n  updateSigmaColor(0)\n\n  function render() {\n    gl.viewport(0, 0, outputWidth, outputHeight)\n    gl.useProgram(program)\n    gl.activeTexture(gl.TEXTURE1)\n    gl.bindTexture(gl.TEXTURE_2D, inputTexture)\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n  }\n\n  function updateSigmaSpace(sigmaSpace: number) {\n    sigmaSpace *= Math.max(\n      outputWidth / segmentationWidth,\n      outputHeight / segmentationHeight\n    )\n\n    const kSparsityFactor = 0.66 // Higher is more sparse.\n    const sparsity = Math.max(1, Math.sqrt(sigmaSpace) * kSparsityFactor)\n    const step = sparsity\n    const radius = sigmaSpace\n    const offset = step > 1 ? step * 0.5 : 0\n    const sigmaTexel = Math.max(texelWidth, texelHeight) * sigmaSpace\n\n    gl.useProgram(program)\n    gl.uniform1f(stepLocation, step)\n    gl.uniform1f(radiusLocation, radius)\n    gl.uniform1f(offsetLocation, offset)\n    gl.uniform1f(sigmaTexelLocation, sigmaTexel)\n  }\n\n  function updateSigmaColor(sigmaColor: number) {\n    gl.useProgram(program)\n    gl.uniform1f(sigmaColorLocation, sigmaColor)\n  }\n\n  function cleanUp() {\n    gl.deleteFramebuffer(frameBuffer)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n  }\n\n  return { render, updateSigmaSpace, updateSigmaColor, cleanUp }\n}\n","import { BlendMode } from '../../core/helpers/postProcessingHelper'\nimport {\n  compileShader,\n  createPiplelineStageProgram,\n  createTexture,\n  glsl,\n} from '../helpers/webglHelper'\n\nexport type BackgroundImageStage = {\n  render(): void\n  updateCoverage(coverage: [number, number]): void\n  updateLightWrapping(lightWrapping: number): void\n  updateBlendMode(blendMode: BlendMode): void\n  cleanUp(): void\n}\n\nexport function buildBackgroundImageStage(\n  gl: WebGL2RenderingContext,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  personMaskTexture: WebGLTexture,\n  backgroundImage: HTMLImageElement | null,\n  canvas: HTMLCanvasElement\n): BackgroundImageStage {\n  const vertexShaderSource = glsl`#version 300 es\n\n    uniform vec2 u_backgroundScale;\n    uniform vec2 u_backgroundOffset;\n\n    in vec2 a_position;\n    in vec2 a_texCoord;\n\n    out vec2 v_texCoord;\n    out vec2 v_backgroundCoord;\n\n    void main() {\n      // Flipping Y is required when rendering to canvas\n      gl_Position = vec4(a_position * vec2(1.0, -1.0), 0.0, 1.0);\n      v_texCoord = a_texCoord;\n      v_backgroundCoord = a_texCoord * u_backgroundScale + u_backgroundOffset;\n    }\n  `\n\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_personMask;\n    uniform sampler2D u_background;\n    uniform vec2 u_coverage;\n    uniform float u_lightWrapping;\n    uniform float u_blendMode;\n\n    in vec2 v_texCoord;\n    in vec2 v_backgroundCoord;\n\n    out vec4 outColor;\n\n    vec3 screen(vec3 a, vec3 b) {\n      return 1.0 - (1.0 - a) * (1.0 - b);\n    }\n\n    vec3 linearDodge(vec3 a, vec3 b) {\n      return a + b;\n    }\n\n    void main() {\n      vec3 frameColor = texture(u_inputFrame, v_texCoord).rgb;\n      vec3 backgroundColor = texture(u_background, v_backgroundCoord).rgb;\n      float personMask = texture(u_personMask, v_texCoord).a;\n      float lightWrapMask = 1.0 - max(0.0, personMask - u_coverage.y) / (1.0 - u_coverage.y);\n      vec3 lightWrap = u_lightWrapping * lightWrapMask * backgroundColor;\n      frameColor = u_blendMode * linearDodge(frameColor, lightWrap) +\n        (1.0 - u_blendMode) * screen(frameColor, lightWrap);\n      personMask = smoothstep(u_coverage.x, u_coverage.y, personMask);\n      outColor = vec4(frameColor * personMask + backgroundColor * (1.0 - personMask), 1.0);\n    }\n  `\n\n  const { width: outputWidth, height: outputHeight } = canvas\n  const outputRatio = outputWidth / outputHeight\n\n  const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource)\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const backgroundScaleLocation = gl.getUniformLocation(\n    program,\n    'u_backgroundScale'\n  )\n  const backgroundOffsetLocation = gl.getUniformLocation(\n    program,\n    'u_backgroundOffset'\n  )\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\n  const personMaskLocation = gl.getUniformLocation(program, 'u_personMask')\n  const backgroundLocation = gl.getUniformLocation(program, 'u_background')\n  const coverageLocation = gl.getUniformLocation(program, 'u_coverage')\n  const lightWrappingLocation = gl.getUniformLocation(\n    program,\n    'u_lightWrapping'\n  )\n  const blendModeLocation = gl.getUniformLocation(program, 'u_blendMode')\n\n  gl.useProgram(program)\n  gl.uniform2f(backgroundScaleLocation, 1, 1)\n  gl.uniform2f(backgroundOffsetLocation, 0, 0)\n  gl.uniform1i(inputFrameLocation, 0)\n  gl.uniform1i(personMaskLocation, 1)\n  gl.uniform2f(coverageLocation, 0, 1)\n  gl.uniform1f(lightWrappingLocation, 0)\n  gl.uniform1f(blendModeLocation, 0)\n\n  let backgroundTexture: WebGLTexture | null = null\n  // TODO Find a better to handle background being loaded\n  if (backgroundImage?.complete) {\n    updateBackgroundImage(backgroundImage)\n  } else if (backgroundImage) {\n    backgroundImage.onload = () => {\n      updateBackgroundImage(backgroundImage)\n    }\n  }\n\n  function render() {\n    gl.viewport(0, 0, outputWidth, outputHeight)\n    gl.useProgram(program)\n    gl.activeTexture(gl.TEXTURE1)\n    gl.bindTexture(gl.TEXTURE_2D, personMaskTexture)\n    if (backgroundTexture !== null) {\n      gl.activeTexture(gl.TEXTURE2)\n      gl.bindTexture(gl.TEXTURE_2D, backgroundTexture)\n      // TODO Handle correctly the background not loaded yet\n      gl.uniform1i(backgroundLocation, 2)\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n  }\n\n  function updateBackgroundImage(backgroundImage: HTMLImageElement) {\n    backgroundTexture = createTexture(\n      gl,\n      gl.RGBA8,\n      backgroundImage.naturalWidth,\n      backgroundImage.naturalHeight,\n      gl.LINEAR,\n      gl.LINEAR\n    )\n    gl.texSubImage2D(\n      gl.TEXTURE_2D,\n      0,\n      0,\n      0,\n      backgroundImage.naturalWidth,\n      backgroundImage.naturalHeight,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      backgroundImage\n    )\n\n    let xOffset = 0\n    let yOffset = 0\n    let backgroundWidth = backgroundImage.naturalWidth\n    let backgroundHeight = backgroundImage.naturalHeight\n    const backgroundRatio = backgroundWidth / backgroundHeight\n    if (backgroundRatio < outputRatio) {\n      backgroundHeight = backgroundWidth / outputRatio\n      yOffset = (backgroundImage.naturalHeight - backgroundHeight) / 2\n    } else {\n      backgroundWidth = backgroundHeight * outputRatio\n      xOffset = (backgroundImage.naturalWidth - backgroundWidth) / 2\n    }\n\n    const xScale = backgroundWidth / backgroundImage.naturalWidth\n    const yScale = backgroundHeight / backgroundImage.naturalHeight\n    xOffset /= backgroundImage.naturalWidth\n    yOffset /= backgroundImage.naturalHeight\n\n    gl.uniform2f(backgroundScaleLocation, xScale, yScale)\n    gl.uniform2f(backgroundOffsetLocation, xOffset, yOffset)\n  }\n\n  function updateCoverage(coverage: [number, number]) {\n    gl.useProgram(program)\n    gl.uniform2f(coverageLocation, coverage[0], coverage[1])\n  }\n\n  function updateLightWrapping(lightWrapping: number) {\n    gl.useProgram(program)\n    gl.uniform1f(lightWrappingLocation, lightWrapping)\n  }\n\n  function updateBlendMode(blendMode: BlendMode) {\n    gl.useProgram(program)\n    gl.uniform1f(blendModeLocation, blendMode === 'screen' ? 0 : 1)\n  }\n\n  function cleanUp() {\n    gl.deleteTexture(backgroundTexture)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n    gl.deleteShader(vertexShader)\n  }\n\n  return {\n    render,\n    updateCoverage,\n    updateLightWrapping,\n    updateBlendMode,\n    cleanUp,\n  }\n}\n","import { BodyPix } from '@tensorflow-models/body-pix'\nimport { useEffect, useRef, useState } from 'react'\nimport { buildCanvas2dPipeline } from '../../pipelines/canvas2d/canvas2dPipeline'\nimport { buildWebGL2Pipeline } from '../../pipelines/webgl2/webgl2Pipeline'\nimport { BackgroundConfig } from '../helpers/backgroundHelper'\nimport { RenderingPipeline } from '../helpers/renderingPipelineHelper'\nimport { SegmentationConfig } from '../helpers/segmentationHelper'\nimport { SourcePlayback } from '../helpers/sourceHelper'\nimport { TFLite } from './useTFLite'\n\nfunction useRenderingPipeline(\n  sourcePlayback: SourcePlayback,\n  backgroundConfig: BackgroundConfig,\n  segmentationConfig: SegmentationConfig,\n  bodyPix: BodyPix,\n  tflite: TFLite\n) {\n  const [pipeline, setPipeline] = useState<RenderingPipeline | null>(null)\n  const backgroundImageRef = useRef<HTMLImageElement>(null)\n  const canvasRef = useRef<HTMLCanvasElement>(null!)\n  const [fps, setFps] = useState(0)\n  const [durations, setDurations] = useState<number[]>([])\n\n  useEffect(() => {\n    // The useEffect cleanup function is not enough to stop\n    // the rendering loop when the framerate is low\n    let shouldRender = true\n\n    let previousTime = 0\n    let beginTime = 0\n    let eventCount = 0\n    let frameCount = 0\n    const frameDurations: number[] = []\n\n    let renderRequestId: number\n\n    const newPipeline =\n      segmentationConfig.pipeline === 'webgl2'\n        ? buildWebGL2Pipeline(\n            sourcePlayback,\n            backgroundImageRef.current,\n            backgroundConfig,\n            segmentationConfig,\n            canvasRef.current,\n            tflite,\n            addFrameEvent\n          )\n        : buildCanvas2dPipeline(\n            sourcePlayback,\n            backgroundConfig,\n            segmentationConfig,\n            canvasRef.current,\n            bodyPix,\n            tflite,\n            addFrameEvent\n          )\n\n    async function render() {\n      if (!shouldRender) {\n        return\n      }\n      beginFrame()\n      await newPipeline.render()\n      endFrame()\n      renderRequestId = requestAnimationFrame(render)\n    }\n\n    function beginFrame() {\n      beginTime = Date.now()\n    }\n\n    function addFrameEvent() {\n      const time = Date.now()\n      frameDurations[eventCount] = time - beginTime\n      beginTime = time\n      eventCount++\n    }\n\n    function endFrame() {\n      const time = Date.now()\n      frameDurations[eventCount] = time - beginTime\n      frameCount++\n      if (time >= previousTime + 1000) {\n        setFps((frameCount * 1000) / (time - previousTime))\n        setDurations(frameDurations)\n        previousTime = time\n        frameCount = 0\n      }\n      eventCount = 0\n    }\n\n    render()\n    console.log(\n      'Animation started:',\n      sourcePlayback,\n      backgroundConfig,\n      segmentationConfig\n    )\n\n    setPipeline(newPipeline)\n\n    return () => {\n      shouldRender = false\n      cancelAnimationFrame(renderRequestId)\n      newPipeline.cleanUp()\n      console.log(\n        'Animation stopped:',\n        sourcePlayback,\n        backgroundConfig,\n        segmentationConfig\n      )\n\n      setPipeline(null)\n    }\n  }, [sourcePlayback, backgroundConfig, segmentationConfig, bodyPix, tflite])\n\n  return {\n    pipeline,\n    backgroundImageRef,\n    canvasRef,\n    fps,\n    durations,\n  }\n}\n\nexport default useRenderingPipeline\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport { BodyPix } from '@tensorflow-models/body-pix'\nimport React, { useEffect } from 'react'\nimport { BackgroundConfig } from '../helpers/backgroundHelper'\nimport { PostProcessingConfig } from '../helpers/postProcessingHelper'\nimport { SegmentationConfig } from '../helpers/segmentationHelper'\nimport { SourcePlayback } from '../helpers/sourceHelper'\nimport useRenderingPipeline from '../hooks/useRenderingPipeline'\nimport { TFLite } from '../hooks/useTFLite'\n\ntype OutputViewerProps = {\n  sourcePlayback: SourcePlayback\n  backgroundConfig: BackgroundConfig\n  segmentationConfig: SegmentationConfig\n  postProcessingConfig: PostProcessingConfig\n  bodyPix: BodyPix\n  tflite: TFLite\n}\n\nfunction OutputViewer(props: OutputViewerProps) {\n  const classes = useStyles()\n  const {\n    pipeline,\n    backgroundImageRef,\n    canvasRef,\n    fps,\n    durations: [resizingDuration, inferenceDuration, postProcessingDuration],\n  } = useRenderingPipeline(\n    props.sourcePlayback,\n    props.backgroundConfig,\n    props.segmentationConfig,\n    props.bodyPix,\n    props.tflite\n  )\n\n  useEffect(() => {\n    if (pipeline) {\n      pipeline.updatePostProcessingConfig(props.postProcessingConfig)\n    }\n  }, [pipeline, props.postProcessingConfig])\n\n  const statDetails = [\n    `resizing ${resizingDuration}ms`,\n    `inference ${inferenceDuration}ms`,\n    `post-processing ${postProcessingDuration}ms`,\n  ]\n  const stats = `${Math.round(fps)} fps (${statDetails.join(', ')})`\n\n  return (\n    <div className={classes.root}>\n      {props.backgroundConfig.type === 'image' && (\n        <img\n          ref={backgroundImageRef}\n          className={classes.render}\n          src={props.backgroundConfig.url}\n          alt=\"\"\n          hidden={props.segmentationConfig.pipeline === 'webgl2'}\n        />\n      )}\n      <canvas\n        // The key attribute is required to create a new canvas when switching\n        // context mode\n        key={props.segmentationConfig.pipeline}\n        ref={canvasRef}\n        className={classes.render}\n        width={props.sourcePlayback.width}\n        height={props.sourcePlayback.height}\n      />\n      <Typography className={classes.stats} variant=\"caption\">\n        {stats}\n      </Typography>\n    </div>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flex: 1,\n      position: 'relative',\n    },\n    render: {\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      objectFit: 'cover',\n    },\n    stats: {\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      left: 0,\n      textAlign: 'center',\n      backgroundColor: 'rgba(0, 0, 0, 0.48)',\n      color: theme.palette.common.white,\n    },\n  })\n)\n\nexport default OutputViewer\n","import CircularProgress from '@material-ui/core/CircularProgress'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport VideocamOffIcon from '@material-ui/icons/VideocamOff'\nimport React, { SyntheticEvent, useEffect, useRef, useState } from 'react'\nimport { SourceConfig, SourcePlayback } from '../helpers/sourceHelper'\n\ntype SourceViewerProps = {\n  sourceConfig: SourceConfig\n  onLoad: (sourcePlayback: SourcePlayback) => void\n}\n\nfunction SourceViewer(props: SourceViewerProps) {\n  const classes = useStyles()\n  const [sourceUrl, setSourceUrl] = useState<string>()\n  const [isLoading, setLoading] = useState(false)\n  const [isCameraError, setCameraError] = useState(false)\n  const videoRef = useRef<HTMLVideoElement>(null)\n\n  useEffect(() => {\n    setSourceUrl(undefined)\n    setLoading(true)\n    setCameraError(false)\n\n    // Enforces reloading the resource, otherwise\n    // onLoad event is not always dispatched and the\n    // progress indicator never disappears\n    setTimeout(() => setSourceUrl(props.sourceConfig.url))\n  }, [props.sourceConfig])\n\n  useEffect(() => {\n    async function getCameraStream() {\n      try {\n        const constraint = { video: true }\n        const stream = await navigator.mediaDevices.getUserMedia(constraint)\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream\n          return\n        }\n      } catch (error) {\n        console.error('Error opening video camera.', error)\n      }\n      setLoading(false)\n      setCameraError(true)\n    }\n\n    if (props.sourceConfig.type === 'camera') {\n      getCameraStream()\n    } else if (videoRef.current) {\n      videoRef.current.srcObject = null\n    }\n  }, [props.sourceConfig])\n\n  function handleImageLoad(event: SyntheticEvent) {\n    const image = event.target as HTMLImageElement\n    props.onLoad({\n      htmlElement: image,\n      width: image.naturalWidth,\n      height: image.naturalHeight,\n    })\n    setLoading(false)\n  }\n\n  function handleVideoLoad(event: SyntheticEvent) {\n    const video = event.target as HTMLVideoElement\n    props.onLoad({\n      htmlElement: video,\n      width: video.videoWidth,\n      height: video.videoHeight,\n    })\n    setLoading(false)\n  }\n\n  return (\n    <div className={classes.root}>\n      {isLoading && <CircularProgress />}\n      {props.sourceConfig.type === 'image' ? (\n        <img\n          className={classes.sourcePlayback}\n          src={sourceUrl}\n          hidden={isLoading}\n          alt=\"\"\n          onLoad={handleImageLoad}\n        />\n      ) : isCameraError ? (\n        <VideocamOffIcon fontSize=\"large\" />\n      ) : (\n        <video\n          ref={videoRef}\n          className={classes.sourcePlayback}\n          src={sourceUrl}\n          hidden={isLoading}\n          autoPlay\n          playsInline\n          controls={false}\n          muted\n          loop\n          onLoadedData={handleVideoLoad}\n        />\n      )}\n    </div>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      position: 'relative',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n\n      [theme.breakpoints.down('xs')]: {\n        width: 0,\n        overflow: 'hidden',\n      },\n\n      [theme.breakpoints.up('sm')]: {\n        flex: 1,\n        borderRightWidth: 1,\n        borderRightStyle: 'solid',\n        borderRightColor: theme.palette.divider,\n      },\n    },\n    sourcePlayback: {\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      objectFit: 'cover',\n    },\n  })\n)\n\nexport default SourceViewer\n","import Avatar from '@material-ui/core/Avatar'\nimport Paper from '@material-ui/core/Paper'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport { BodyPix } from '@tensorflow-models/body-pix'\nimport { useEffect, useState } from 'react'\nimport { BackgroundConfig } from '../helpers/backgroundHelper'\nimport { PostProcessingConfig } from '../helpers/postProcessingHelper'\nimport { SegmentationConfig } from '../helpers/segmentationHelper'\nimport { SourceConfig, SourcePlayback } from '../helpers/sourceHelper'\nimport { TFLite } from '../hooks/useTFLite'\nimport OutputViewer from './OutputViewer'\nimport SourceViewer from './SourceViewer'\n\ntype ViewerCardProps = {\n  sourceConfig: SourceConfig\n  backgroundConfig: BackgroundConfig\n  segmentationConfig: SegmentationConfig\n  postProcessingConfig: PostProcessingConfig\n  bodyPix?: BodyPix\n  tflite?: TFLite\n}\n\nfunction ViewerCard(props: ViewerCardProps) {\n  const classes = useStyles()\n  const [sourcePlayback, setSourcePlayback] = useState<SourcePlayback>()\n\n  useEffect(() => {\n    setSourcePlayback(undefined)\n  }, [props.sourceConfig])\n\n  return (\n    <Paper className={classes.root}>\n      <SourceViewer\n        sourceConfig={props.sourceConfig}\n        onLoad={setSourcePlayback}\n      />\n      {sourcePlayback && props.bodyPix && props.tflite ? (\n        <OutputViewer\n          sourcePlayback={sourcePlayback}\n          backgroundConfig={props.backgroundConfig}\n          segmentationConfig={props.segmentationConfig}\n          postProcessingConfig={props.postProcessingConfig}\n          bodyPix={props.bodyPix}\n          tflite={props.tflite}\n        />\n      ) : (\n        <div className={classes.noOutput}>\n          <Avatar className={classes.avatar} />\n        </div>\n      )}\n    </Paper>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) => {\n  const minHeight = [`${theme.spacing(52)}px`, `100vh - ${theme.spacing(2)}px`]\n\n  return createStyles({\n    root: {\n      minHeight: `calc(min(${minHeight.join(', ')}))`,\n      display: 'flex',\n      overflow: 'hidden',\n\n      [theme.breakpoints.up('md')]: {\n        gridColumnStart: 1,\n        gridColumnEnd: 3,\n      },\n\n      [theme.breakpoints.up('lg')]: {\n        gridRowStart: 1,\n        gridRowEnd: 3,\n      },\n    },\n    noOutput: {\n      flex: 1,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    avatar: {\n      width: theme.spacing(20),\n      height: theme.spacing(20),\n    },\n  })\n})\n\nexport default ViewerCard\n","import * as tfBodyPix from '@tensorflow-models/body-pix'\nimport * as tf from '@tensorflow/tfjs'\nimport { useEffect, useState } from 'react'\n\nfunction useBodyPix() {\n  const [bodyPix, setBodyPix] = useState<tfBodyPix.BodyPix>()\n\n  useEffect(() => {\n    async function loadBodyPix() {\n      console.log('Loading TensorFlow.js and BodyPix segmentation model')\n      await tf.ready()\n      setBodyPix(await tfBodyPix.load())\n      console.log('TensorFlow.js and BodyPix loaded')\n    }\n\n    loadBodyPix()\n  }, [])\n\n  return bodyPix\n}\n\nexport default useBodyPix\n","import { useEffect, useState } from 'react'\nimport { SegmentationConfig } from '../helpers/segmentationHelper'\n\ndeclare function createTFLiteModule(): Promise<TFLite>\ndeclare function createTFLiteSIMDModule(): Promise<TFLite>\n\nexport interface TFLite extends EmscriptenModule {\n  _getModelBufferMemoryOffset(): number\n  _getInputMemoryOffset(): number\n  _getInputHeight(): number\n  _getInputWidth(): number\n  _getInputChannelCount(): number\n  _getOutputMemoryOffset(): number\n  _getOutputHeight(): number\n  _getOutputWidth(): number\n  _getOutputChannelCount(): number\n  _loadModel(bufferSize: number): number\n  _runInference(): number\n}\n\nfunction useTFLite(segmentationConfig: SegmentationConfig) {\n  const [tflite, setTFLite] = useState<TFLite>()\n  const [tfliteSIMD, setTFLiteSIMD] = useState<TFLite>()\n  const [selectedTFLite, setSelectedTFLite] = useState<TFLite>()\n  const [isSIMDSupported, setSIMDSupported] = useState(false)\n\n  useEffect(() => {\n    async function loadTFLite() {\n      createTFLiteModule().then(setTFLite)\n      try {\n        const createdTFLiteSIMD = await createTFLiteSIMDModule()\n        setTFLiteSIMD(createdTFLiteSIMD)\n        setSIMDSupported(true)\n      } catch (error) {\n        console.warn('Failed to create TFLite SIMD WebAssembly module.', error)\n      }\n    }\n\n    loadTFLite()\n  }, [])\n\n  useEffect(() => {\n    async function loadMeetModel() {\n      if (\n        !tflite ||\n        (isSIMDSupported && !tfliteSIMD) ||\n        (!isSIMDSupported && segmentationConfig.backend === 'wasmSimd') ||\n        segmentationConfig.model !== 'meet'\n      ) {\n        return\n      }\n\n      setSelectedTFLite(undefined)\n\n      const newSelectedTFLite =\n        segmentationConfig.backend === 'wasmSimd' ? tfliteSIMD : tflite\n\n      if (!newSelectedTFLite) {\n        throw new Error(\n          `TFLite backend unavailable: ${segmentationConfig.backend}`\n        )\n      }\n\n      const modelFileName =\n        segmentationConfig.inputResolution === '144p'\n          ? 'segm_full_v679'\n          : 'segm_lite_v681'\n      console.log('Loading meet model:', modelFileName)\n\n      const modelResponse = await fetch(\n        `${process.env.PUBLIC_URL}/models/${modelFileName}.tflite`\n      )\n      const model = await modelResponse.arrayBuffer()\n      console.log('Model buffer size:', model.byteLength)\n\n      const modelBufferOffset = newSelectedTFLite._getModelBufferMemoryOffset()\n      console.log('Model buffer memory offset:', modelBufferOffset)\n      console.log('Loading model buffer...')\n      newSelectedTFLite.HEAPU8.set(new Uint8Array(model), modelBufferOffset)\n      console.log(\n        '_loadModel result:',\n        newSelectedTFLite._loadModel(model.byteLength)\n      )\n\n      console.log(\n        'Input memory offset:',\n        newSelectedTFLite._getInputMemoryOffset()\n      )\n      console.log('Input height:', newSelectedTFLite._getInputHeight())\n      console.log('Input width:', newSelectedTFLite._getInputWidth())\n      console.log('Input channels:', newSelectedTFLite._getInputChannelCount())\n\n      console.log(\n        'Output memory offset:',\n        newSelectedTFLite._getOutputMemoryOffset()\n      )\n      console.log('Output height:', newSelectedTFLite._getOutputHeight())\n      console.log('Output width:', newSelectedTFLite._getOutputWidth())\n      console.log(\n        'Output channels:',\n        newSelectedTFLite._getOutputChannelCount()\n      )\n\n      setSelectedTFLite(newSelectedTFLite)\n    }\n\n    loadMeetModel()\n  }, [\n    tflite,\n    tfliteSIMD,\n    isSIMDSupported,\n    segmentationConfig.model,\n    segmentationConfig.backend,\n    segmentationConfig.inputResolution,\n  ])\n\n  return { tflite: selectedTFLite, isSIMDSupported }\n}\n\nexport default useTFLite\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport { useEffect, useState } from 'react'\nimport BackgroundConfigCard from './core/components/BackgroundConfigCard'\nimport PostProcessingConfigCard from './core/components/PostProcessingConfigCard'\nimport SegmentationConfigCard from './core/components/SegmentationConfigCard'\nimport SourceConfigCard from './core/components/SourceConfigCard'\nimport ViewerCard from './core/components/ViewerCard'\nimport {\n  BackgroundConfig,\n  backgroundImageUrls,\n} from './core/helpers/backgroundHelper'\nimport { PostProcessingConfig } from './core/helpers/postProcessingHelper'\nimport { SegmentationConfig } from './core/helpers/segmentationHelper'\nimport { SourceConfig, sourceImageUrls } from './core/helpers/sourceHelper'\nimport useBodyPix from './core/hooks/useBodyPix'\nimport useTFLite from './core/hooks/useTFLite'\n\nfunction App() {\n  const classes = useStyles()\n  const [sourceConfig, setSourceConfig] = useState<SourceConfig>({\n    type: 'image',\n    url: sourceImageUrls[0],\n  })\n  const [backgroundConfig, setBackgroundConfig] = useState<BackgroundConfig>({\n    type: 'image',\n    url: backgroundImageUrls[0],\n  })\n  const [\n    segmentationConfig,\n    setSegmentationConfig,\n  ] = useState<SegmentationConfig>({\n    model: 'meet',\n    backend: 'wasm',\n    inputResolution: '96p',\n    pipeline: 'webgl2',\n  })\n  const [\n    postProcessingConfig,\n    setPostProcessingConfig,\n  ] = useState<PostProcessingConfig>({\n    smoothSegmentationMask: true,\n    jointBilateralFilter: { sigmaSpace: 1, sigmaColor: 0.1 },\n    coverage: [0.5, 0.75],\n    lightWrapping: 0.3,\n    blendMode: 'screen',\n  })\n  const bodyPix = useBodyPix()\n  const { tflite, isSIMDSupported } = useTFLite(segmentationConfig)\n\n  useEffect(() => {\n    setSegmentationConfig((previousSegmentationConfig) => {\n      if (previousSegmentationConfig.backend === 'wasm' && isSIMDSupported) {\n        return { ...previousSegmentationConfig, backend: 'wasmSimd' }\n      } else {\n        return previousSegmentationConfig\n      }\n    })\n  }, [isSIMDSupported])\n\n  return (\n    <div className={classes.root}>\n      <ViewerCard\n        sourceConfig={sourceConfig}\n        backgroundConfig={backgroundConfig}\n        segmentationConfig={segmentationConfig}\n        postProcessingConfig={postProcessingConfig}\n        bodyPix={bodyPix}\n        tflite={tflite}\n      />\n      <SourceConfigCard config={sourceConfig} onChange={setSourceConfig} />\n      <BackgroundConfigCard\n        config={backgroundConfig}\n        onChange={setBackgroundConfig}\n      />\n      <SegmentationConfigCard\n        config={segmentationConfig}\n        isSIMDSupported={isSIMDSupported}\n        onChange={setSegmentationConfig}\n      />\n      <PostProcessingConfigCard\n        config={postProcessingConfig}\n        pipeline={segmentationConfig.pipeline}\n        onChange={setPostProcessingConfig}\n      />\n    </div>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'grid',\n\n      [theme.breakpoints.up('xs')]: {\n        margin: theme.spacing(1),\n        gap: theme.spacing(1),\n        gridTemplateColumns: '1fr',\n      },\n\n      [theme.breakpoints.up('md')]: {\n        margin: theme.spacing(2),\n        gap: theme.spacing(2),\n        gridTemplateColumns: 'repeat(2, 1fr)',\n      },\n\n      [theme.breakpoints.up('lg')]: {\n        gridTemplateColumns: 'repeat(3, 1fr)',\n      },\n    },\n    resourceSelectionCards: {\n      display: 'flex',\n      flexDirection: 'column',\n    },\n  })\n)\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import CssBaseline from '@material-ui/core/CssBaseline'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}